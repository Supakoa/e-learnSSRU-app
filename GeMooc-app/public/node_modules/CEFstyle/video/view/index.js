if (video.type == 'youtube') {
    let videoId = getId(video.data);
    let iframeMarkup = 'https://www.youtube.com/embed/' + videoId;

    function getId(url) {
        var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        var match = url.match(regExp);

        if (match && match[2].length == 11) {
            return match[2];
        } else {
            return 'error';
        }
    }

    // set into src iframe
    $('#showVideo').attr('src', iframeMarkup);
}

// test send record
// function takeRecord() {
//     $("#recordItem").val(JSON.stringify(videoRecord));
// }

let videoIdSharp;
let action;

if (video.type == 'youtube') {
    // console.log('youtube');
    videoIdSharp = '#player1';
    action = 'ready';
} else {
    // console.log('file');
    videoIdSharp = '#player2';
    action = 'loadeddata';
}

let player = new Plyr(videoIdSharp, {
    settings: ['captions', 'quality', 'loop'],
});

$(document).ready(function () {
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });

});

$(videoIdSharp).on(action, function () {
    /**
        Omega magneto jello function
    */
    let i = j = 0;
    let iHaveTimer = false;
    // console.log('player.duration :', Math.floor(player.duration));
    let buffer = new Array(Math.floor(player.duration));

    // [old module] creat new record bar
    // for (let i = 0; i < buffer.length; i++) {
    //     var second = parseInt(i % 60);
    //     var minute = parseInt(i / 60);
    //     (second < 10) ? second = '0' + second: second;
    //     (minute < 10) ? minute = '0' + minute: minute;
    //     var newLi = document.createElement('div');
    //     newLi.className = 'recordSlot';
    //     newLi.style.width = ($(videoIdSharp).width()) / buffer.length + 'px';
    //     newLi.setAttribute('at_record', i);
    //     newLi.setAttribute('status', 'undefind');
    //     newLi.setAttribute('data-toggle', 'tooltip');
    //     newLi.setAttribute('data-placement', 'bottom');
    //     newLi.setAttribute('title', minute + ':' + second);
    //     newLi.onclick = function () {
    //         // console.log('currentTime: ' + i);
    //         player.currentTime = i;
    //         click = true;
    //     }
    //     // console.log('object :' + ($(videoIdSharp).width()));
    //     document.getElementById('navProgress').appendChild(newLi);
    // }


    // [new module] creat new record bar
    // value for ajax
    let bufferLength = buffer.length;
    let videoWidth = $(videoIdSharp).width();

    // convert record.record to array
    let parseRecord = JSON.parse(record.record);

    $.ajax({
        type: "post",
        url: callRecord,
        data: {'bufferLength':bufferLength, 'videoWidth':videoWidth},
        success: function (response) {
            // console.log('response :', JSON.parse(response));
            $('.navProgress').html(JSON.parse(response));

            // set color to navbar
            for (let i = 0; i < parseRecord.length; i++) {
                if (parseRecord[i] == 1) {
                    $('[at_record=' + i + ']').attr('status', 'save');
                }
            }
        }
    });


    // take record to videoRecord
    let videoRecord = {
        "content_id": content.id,
        "user_id": userId,
        "record": parseRecord,
        "percent": record.percent,
    }

    // console.log('record.record', parseRecord);

    // take record to buffer
    buffer = JSON.parse(record.record);

    // console.log('parseRecord :', parseRecord);

    // oneRady start interval
    // $("body").on("ready", function () {
    // console.log('ready..');

    // interval use for save videoRecorder to database
    setInterval(function () {
        $.post(urlRecord, {
                'muuwan': JSON.stringify(videoRecord)
            },
            function (data, textStatus, jqXHR) {
                let parseData = JSON.parse(data);
                for (let i = 0; i < parseData.record.length; i++) {
                    if (parseData.record[i] == 1) {
                        $('[at_record=' + i + ']').attr('status', 'save');
                    }
                }
            },
        );
    }, 10000);

    // set css to recordSlot then have value because new node not use css file
    // parseRecord.forEach(record => {
    //     if (record == 1) {
    //         $('[at_record=' + record + ']').attr('status', 'save');
    //     }
    // });

    // for (let i = 0; i < parseRecord.length; i++) {
    //     if (parseRecord[i] == 1) {
    //         $('[at_record=' + i + ']').attr('status', 'save');
    //     }
    // }

    // for (let i = 0; i < parseRecord.length; i++) {
    //     if(parseRecord[i] != 1){
    //         $('[at_record=' + record + ']').attr('status', 'save');
    //     }
    // }

    $(videoIdSharp).on("play", function () {
        // console.log('fucking click..');

        // check have only one interval
        if (!iHaveTimer) {
            // get current time from player
            i = Math.floor(player.currentTime);

            // create new interval
            var timer = setInterval(function () {
                j = i;
                i = Math.floor(player.currentTime);

                // get val to videoRecord
                const tim = Math.floor(player.currentTime);
                buffer[tim] = 1;
                videoRecord.record = buffer;
                // count record it have value-> 1
                let countSave = 0;
                videoRecord.record.forEach(record => {
                    if(record == 1){
                        countSave++;
                    }
                });
                videoRecord.percent = Math.floor((countSave / player.duration) * 100);

                // when stop player do clear interval
                if (!player.playing) {
                    // console.log('stop..');
                    clearInterval(timer);
                    iHaveTimer = false;
                }

                // console.log('parseRecord['+i+']', parseRecord[i]);
                if (parseRecord[i] == 0 || typeof parseRecord[i] == 'undefined') {
                    $('[at_record=' + i + ']').attr('status', 'unsave');
                }

                // i/o to show val
                // console.log((i++) + " : " + j);
                // timer name
                // console.log(timer);
            }, 1000 / player.speed);

            // return to stop make new interval
            iHaveTimer = true;
        }
    });
});

function recordClick(i){
    player.currentTime = i;
    click = true;
}
